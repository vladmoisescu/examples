// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ipreceiver.proto

package ipreceiver

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	ipprovider "github.com/tiswanso/examples/api/ipam/ipprovider"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IpRange struct {
	Identifier           *RangeIdentifier     `protobuf:"bytes,1,opt,name=identifier,proto3" json:"identifier,omitempty"`
	Prefix               *ipprovider.IpPrefix `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *IpRange) Reset()         { *m = IpRange{} }
func (m *IpRange) String() string { return proto.CompactTextString(m) }
func (*IpRange) ProtoMessage()    {}
func (*IpRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4d44ff8ba3980a5, []int{0}
}

func (m *IpRange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IpRange.Unmarshal(m, b)
}
func (m *IpRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IpRange.Marshal(b, m, deterministic)
}
func (m *IpRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IpRange.Merge(m, src)
}
func (m *IpRange) XXX_Size() int {
	return xxx_messageInfo_IpRange.Size(m)
}
func (m *IpRange) XXX_DiscardUnknown() {
	xxx_messageInfo_IpRange.DiscardUnknown(m)
}

var xxx_messageInfo_IpRange proto.InternalMessageInfo

func (m *IpRange) GetIdentifier() *RangeIdentifier {
	if m != nil {
		return m.Identifier
	}
	return nil
}

func (m *IpRange) GetPrefix() *ipprovider.IpPrefix {
	if m != nil {
		return m.Prefix
	}
	return nil
}

type RangeIdentifier struct {
	Fqdn                 string   `protobuf:"bytes,1,opt,name=fqdn,proto3" json:"fqdn,omitempty"`
	ConnectivityDomain   string   `protobuf:"bytes,3,opt,name=connectivity_domain,json=connectivityDomain,proto3" json:"connectivity_domain,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RangeIdentifier) Reset()         { *m = RangeIdentifier{} }
func (m *RangeIdentifier) String() string { return proto.CompactTextString(m) }
func (*RangeIdentifier) ProtoMessage()    {}
func (*RangeIdentifier) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4d44ff8ba3980a5, []int{1}
}

func (m *RangeIdentifier) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RangeIdentifier.Unmarshal(m, b)
}
func (m *RangeIdentifier) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RangeIdentifier.Marshal(b, m, deterministic)
}
func (m *RangeIdentifier) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RangeIdentifier.Merge(m, src)
}
func (m *RangeIdentifier) XXX_Size() int {
	return xxx_messageInfo_RangeIdentifier.Size(m)
}
func (m *RangeIdentifier) XXX_DiscardUnknown() {
	xxx_messageInfo_RangeIdentifier.DiscardUnknown(m)
}

var xxx_messageInfo_RangeIdentifier proto.InternalMessageInfo

func (m *RangeIdentifier) GetFqdn() string {
	if m != nil {
		return m.Fqdn
	}
	return ""
}

func (m *RangeIdentifier) GetConnectivityDomain() string {
	if m != nil {
		return m.ConnectivityDomain
	}
	return ""
}

func init() {
	proto.RegisterType((*IpRange)(nil), "ippool.IpRange")
	proto.RegisterType((*RangeIdentifier)(nil), "ippool.RangeIdentifier")
}

func init() { proto.RegisterFile("ipreceiver.proto", fileDescriptor_d4d44ff8ba3980a5) }

var fileDescriptor_d4d44ff8ba3980a5 = []byte{
	// 273 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x51, 0x3d, 0x4f, 0xf3, 0x30,
	0x10, 0x7e, 0xfb, 0x82, 0x8a, 0xb8, 0x52, 0xb5, 0x32, 0x48, 0x44, 0x9d, 0x50, 0xa6, 0x4e, 0xb1,
	0x28, 0x03, 0x73, 0x10, 0x0c, 0xd9, 0x50, 0x24, 0x18, 0x58, 0x90, 0x9b, 0x5c, 0xc2, 0x49, 0xb1,
	0x7d, 0x38, 0x26, 0x6a, 0xf9, 0xf5, 0x08, 0xa7, 0xa5, 0x11, 0x1b, 0xdb, 0xa3, 0xe7, 0xd3, 0x1f,
	0x30, 0x27, 0x76, 0x58, 0x20, 0x75, 0xe8, 0x12, 0x76, 0xd6, 0x5b, 0x31, 0x26, 0x66, 0x6b, 0x9b,
	0x45, 0x5a, 0x93, 0x7f, 0xfb, 0x58, 0x27, 0x85, 0xd5, 0x92, 0x5a, 0xef, 0x94, 0x47, 0x2d, 0x71,
	0xa3, 0x34, 0x37, 0xd8, 0x4a, 0xc5, 0x24, 0x89, 0x95, 0x96, 0xc4, 0xec, 0x6c, 0x47, 0x25, 0xba,
	0x01, 0xec, 0xab, 0xe2, 0x06, 0x4e, 0x32, 0xce, 0x95, 0xa9, 0x51, 0xdc, 0x02, 0x50, 0x89, 0xc6,
	0x53, 0x45, 0xe8, 0xa2, 0xd1, 0xd5, 0x68, 0x39, 0x59, 0x5d, 0x26, 0xfd, 0x54, 0x12, 0x2c, 0xd9,
	0x8f, 0x9c, 0x0f, 0xac, 0x62, 0x09, 0x63, 0x76, 0x58, 0xd1, 0x26, 0xfa, 0x1f, 0x42, 0xf3, 0x7d,
	0x28, 0xe3, 0xc7, 0xc0, 0xe7, 0x3b, 0x3d, 0x7e, 0x86, 0xd9, 0xaf, 0x22, 0x21, 0xe0, 0xb8, 0x7a,
	0x2f, 0x4d, 0xd8, 0x3b, 0xcd, 0x03, 0x16, 0x12, 0xce, 0x0b, 0x6b, 0x0c, 0x16, 0x9e, 0x3a, 0xf2,
	0xdb, 0xd7, 0xd2, 0x6a, 0x45, 0x26, 0x3a, 0x0a, 0x16, 0x31, 0x94, 0xee, 0x83, 0xb2, 0xfa, 0x84,
	0x8b, 0xdd, 0xd2, 0x77, 0x7b, 0xda, 0x34, 0xb6, 0x50, 0xde, 0x3a, 0x21, 0x61, 0x92, 0xb6, 0x2d,
	0xd5, 0xa6, 0xbf, 0xe1, 0xec, 0x70, 0xb0, 0x40, 0x2c, 0xa6, 0x7b, 0xe2, 0x41, 0xb3, 0xdf, 0xc6,
	0xff, 0xc4, 0x35, 0x4c, 0x9f, 0x8c, 0xfa, 0x4b, 0xe4, 0xee, 0xec, 0x05, 0x0e, 0x1f, 0xb4, 0x1e,
	0x87, 0x67, 0xbd, 0xf9, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x8a, 0x5c, 0x8e, 0xf9, 0xb5, 0x01, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PrefixRangeAllocatorClient is the client API for PrefixRangeAllocator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PrefixRangeAllocatorClient interface {
	AssignRange(ctx context.Context, in *IpRange, opts ...grpc.CallOption) (*ipprovider.Empty, error)
	UnassignRange(ctx context.Context, in *IpRange, opts ...grpc.CallOption) (*ipprovider.Empty, error)
}

type prefixRangeAllocatorClient struct {
	cc *grpc.ClientConn
}

func NewPrefixRangeAllocatorClient(cc *grpc.ClientConn) PrefixRangeAllocatorClient {
	return &prefixRangeAllocatorClient{cc}
}

func (c *prefixRangeAllocatorClient) AssignRange(ctx context.Context, in *IpRange, opts ...grpc.CallOption) (*ipprovider.Empty, error) {
	out := new(ipprovider.Empty)
	err := c.cc.Invoke(ctx, "/ippool.PrefixRangeAllocator/AssignRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prefixRangeAllocatorClient) UnassignRange(ctx context.Context, in *IpRange, opts ...grpc.CallOption) (*ipprovider.Empty, error) {
	out := new(ipprovider.Empty)
	err := c.cc.Invoke(ctx, "/ippool.PrefixRangeAllocator/UnassignRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrefixRangeAllocatorServer is the server API for PrefixRangeAllocator service.
type PrefixRangeAllocatorServer interface {
	AssignRange(context.Context, *IpRange) (*ipprovider.Empty, error)
	UnassignRange(context.Context, *IpRange) (*ipprovider.Empty, error)
}

// UnimplementedPrefixRangeAllocatorServer can be embedded to have forward compatible implementations.
type UnimplementedPrefixRangeAllocatorServer struct {
}

func (*UnimplementedPrefixRangeAllocatorServer) AssignRange(ctx context.Context, req *IpRange) (*ipprovider.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignRange not implemented")
}
func (*UnimplementedPrefixRangeAllocatorServer) UnassignRange(ctx context.Context, req *IpRange) (*ipprovider.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnassignRange not implemented")
}

func RegisterPrefixRangeAllocatorServer(s *grpc.Server, srv PrefixRangeAllocatorServer) {
	s.RegisterService(&_PrefixRangeAllocator_serviceDesc, srv)
}

func _PrefixRangeAllocator_AssignRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpRange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrefixRangeAllocatorServer).AssignRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ippool.PrefixRangeAllocator/AssignRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrefixRangeAllocatorServer).AssignRange(ctx, req.(*IpRange))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrefixRangeAllocator_UnassignRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IpRange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrefixRangeAllocatorServer).UnassignRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ippool.PrefixRangeAllocator/UnassignRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrefixRangeAllocatorServer).UnassignRange(ctx, req.(*IpRange))
	}
	return interceptor(ctx, in, info, handler)
}

var _PrefixRangeAllocator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ippool.PrefixRangeAllocator",
	HandlerType: (*PrefixRangeAllocatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssignRange",
			Handler:    _PrefixRangeAllocator_AssignRange_Handler,
		},
		{
			MethodName: "UnassignRange",
			Handler:    _PrefixRangeAllocator_UnassignRange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ipreceiver.proto",
}
